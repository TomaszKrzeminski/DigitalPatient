@using Microsoft.AspNetCore.Components.Forms
@using Digital_Patient.Models
@using Digital_Patient.Data
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore.Design
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<ApplicationDbContext>  factory

  

<style>
    .HideInput {
        position: fixed;
        left: -200px;
        top: -200px;
    }


    .validation-errors {
        background-color: red;
        color: white;
        padding: 8px;
        text-align: center;
        font-size: 16px;
        font-weight: 500;
    }

    div.validation-message {
        color: red;
        font-weight: 500;
    }

    .modified.valid {
        border: solid 3px rgb(40,167,69);
    }

    .modified.invalid {
        border: solid 3px rgb(220,53,69);
    }












</style>




@if (TaskId > 0)
{
    <div class="container  @BackGroundColor @TextColor  ">
        <div class="col-lg-12">

            <div class="form-group">
                <h2 class="form-control">   @tasktime.TimeOfDay  </h2>

            </div>
            <EditForm EditContext="editContext" OnSubmit="HandleValidSubmit">
                <ObjectGraphDataAnnotationsValidator />
                <InitialValidator />
                <ValidationSummary></ValidationSummary>





                <div class="form-group">
                    <h2 class="form-control"> Kategoria  @model.taskToDo.TaskToDoCategory.CategoryName</h2>

                </div>
                @if (model.taskToDo.Measurements != null)
                {




                    foreach (var m in model.taskToDo.Measurements)
                    {
                        <div class="form-group">

                            <h2 class="form-control ">Zbadaj @m.MeasurementCategory.CategoryName </h2>
                        </div>
                        <div class="form-group">

                            @foreach (var pair in m.MeasurementPairs)
                            {

                                <div clss="row">
                                    <div class="col col-lg-12">
                                        @pair.Name
                                    </div>
                                    <div class="col col-lg-12">
                                        @if (pair.Text)
                                        {
                                            <ValidationMessage For="@(() => pair.MeasurementText)" />
                                            <InputText @bind-Value="pair.MeasurementText"></InputText>

                                        }
                                        else
                                        {
                                            <ValidationMessage For="@(() => pair.MeasurementNumber)" />
                                            <InputNumber @bind-Value="pair.MeasurementNumber"></InputNumber>

                                        }
                                    </div>
                                </div>



                            }

                        </div>


                        <div class="form-group">
                            <label>Dodaj Notatkę</label>
                            <ValidationMessage For="@(() => m.Note.Text)" />
                            @*<InputTextArea @bind-Value="@m.Note.Text"    ></InputTextArea>*@

                            <InputText @bind-Value="m.Note.Text"></InputText>

                        </div>
                    }

                }
                @*onchange="@(() => CheckValidation())"*@
                <div class="form-group">


                </div>

                <div class="form-group">
                    <h2 class="form-control">Czas @DateTime.Now.ToString("ddd, dd MMM yyy HH':'mm':'ss 'GMT'") </h2>

                </div>
                <div class="form-group">
                    <button class="btn btn-danger" type="submit" >Zapisz</button>
                </div>

                @*<div class="form-group">
                    <button class="btn btn-danger" type="submit" @onclick="ChangeMessage">Zapisz</button>
                </div>*@

            </EditForm>





        </div>
    </div>

}









@code
{


    [Parameter] public Action<string> MessageSet { get; set; }

    private void ChangeMessage()
    {
        MessageSet?.Invoke("Zmiana zadania zakończona sukcesem");
    }












    [CascadingParameter(Name = "BackGroundColor1")]
    public string BackGroundColor { get; set; }
    [CascadingParameter(Name = "TextColor1")]
    public string TextColor { get; set; }


    ValidationMessageStore messageStore;
    EditContext editContext;
    EditForm editForm;

    //public TaskToDoActionModel model { get; set; } = new TaskToDoActionModel();
    public TaskToDoActionModel model { get;  set;  } = new TaskToDoActionModel();

    [Parameter]
    public string TaskTime { get; set; }
    public bool DataLogin = false;
    public TaskToDo EditTask { get; set; } = new TaskToDo();
    private Repository repository;
    public bool Check {get;set;}
    [Parameter]
    public int TaskId { get; set; } = 0;

    public DateTime tasktime { get; set; }

    public bool Done { get; set; } = false;

    [Parameter]
    public EventCallback<bool> CustomEvent { get; set; }

    public string Tekst { get; set; } = "Brak";

    public async Task DoneTask()
    {

        Done = true;
        await CustomEvent.InvokeAsync(Done);

    }

    public DateTime GetTimeFromString(string Time)
    {
        int hour = Int32.Parse(Time.Split(":")[0]);
        int minute = Int32.Parse(Time.Split(":")[1]);

        DateTime time = new DateTime(2100, 1, 1, hour, minute, 0);
        return time;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        editContext = new EditContext(model);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnFieldChanged += OnFormUpdated;




    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= OnFormUpdated;
    }

    private void OnFormUpdated(Object sender, FieldChangedEventArgs args)
    {
        CheckValidation();
    }

    protected async override Task OnParametersSetAsync()
    {

        //set time here 

        //editContext = new EditContext(model);
        //messageStore = new ValidationMessageStore(editContext);


        //


        EditTask = new TaskToDo();
        ApplicationDbContext context = factory.CreateDbContext();
        repository = new Repository(context);

        if(TaskId!=0)
        {


            tasktime = GetTimeFromString(TaskTime);
            model.taskToDo =  repository.GetTaskToDo2(TaskId,tasktime);

            //


            List<Measurement> listMeasurement = model.taskToDo.Measurements;


            foreach (var measurement in listMeasurement)
            {


                foreach (var mp in measurement.MeasurementPairs)
                {

                    if(mp.Text==true&&mp.MeasurementText=="")
                    {
                        mp.MeasurementText = null;
                    }




                }

                if(  measurement.Note.Text=="")
                {
                    measurement.Note.Text = null;
                }




            }




            //

            //check if measurement pair is in time               TaskTime//






        }

    }

    public async Task HandleInvalidSubmit()
    {
        if (DataLogin)
        {
            return;
        }


        try
        {

            //using (var repo = new Repository(factory.CreateDbContext()))
            //{
            //    model.TaskCorrectTime = tasktime;
            //    repo.ChangeMeasurmentsData(model);
            //}

        }
        catch (Exception ex)
        {

        }
        finally
        {
            //model = new TaskToDoActionModel();
            DataLogin = false;

        }
    }

    private bool CheckValidation()
    {


        List<MeasurementPair> Pairs = model.taskToDo.Measurements.SelectMany(x => x.MeasurementPairs).ToList();

        Check = false;




        messageStore.Clear();

        List<Measurement> Measurements = model.taskToDo.Measurements.ToList();




        foreach (var item in Measurements)
        {

            if (item.Note.Text == "" || item.Note.Text == null )
            {
                messageStore.Add(() => item.Note.Text, "Uzupełnij dane w Notatce");
                Check = true;

            }
            else if(item.Note.Text != null && item.Note.Text.Count() < 8)
            {
                messageStore.Add(() => item.Note.Text, "Notatka musi zawierać co najmniej 8 znaków text  \" wykonano \" lub \"nie wykonano\" ");
                Check = true;
            }



        }






        //foreach (var item in Measurements)
        //{

        //    if (item.Note.Text == "" || item.Note.Text == null||item.Note.Text.Count()<8)
        //    {
        //        messageStore.Add(() => item.Note.Text, "Uzupełnij dane w Notatce");
        //        if (item.Note.Text!=null&&  item.Note.Text.Count() < 8)
        //        {
        //            messageStore.Add(() => item.Note.Text, "Notatka musi zawierać co najmniej 8 znaków text  \" wykonano \" lub \"nie wykonano\" ");
        //        }
        //    }





        //}



        foreach (var pair in Pairs)
        {

            if (pair.Text)
            {
                bool error = String.IsNullOrEmpty(pair.MeasurementText);
                if (error)
                {
                    messageStore.Add(() => pair.MeasurementText, "Uzupełnij dane w pomiarze");
                    Check = true; ;
                }

            }
            else
            {
                bool error = pair.MeasurementNumber == 0;
                if (error)
                {
                    messageStore.Add(() => pair.MeasurementNumber, "Uzupełnij dane numeryczne");
                    Check = true;
                }
            }



        }


        StateHasChanged();
        return Check;
    }

    private async Task HandleValidSubmit()
    {



        CheckValidation();


        if(Check)
        {
            editContext.Validate();
            return;
        }


        if (DataLogin)
        {
            return;
        }


        try
        {

            using (var repo = new Repository(factory.CreateDbContext()))
            {
                model.TaskCorrectTime = tasktime;
                repo.ChangeMeasurmentsData(model);

                ChangeMessage();

            }

        }
        catch (Exception ex)
        {

        }
        finally
        {
            //model = new TaskToDoActionModel();
            DataLogin = false;

        }
















    }







}




