@page "/taskupdate"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;


@attribute [Authorize]

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.SignalR



@inject NavigationManager NavigationManager


@using System.Net.Http
@using System.Net.Http.Json

@using System;

@using System.Net.Http.Headers;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Http.Connections;
@using System.Net



@inject NavigationManager navigationManager



@using Microsoft.AspNetCore.Components.Forms
@using Digital_Patient.Models
@using Digital_Patient.Data
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore.Design
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore













<h1>Update Task   @Action</h1>
<h2>@Message</h2>



@code {


    [Parameter]
    public string Cookie1 { get; set; }

    public string Message { get; set; } = "";

    private string TaskId { get; set; }
    private string TaskDescriptionMessage { get; set; }
    private HubConnection? hubConnection;
    private bool Action { get; set; } = false;
    //[Inject]
    //public CookiesProvider CookiesProvider { get; set; }
    protected override async Task OnInitializedAsync()
    {



        var container = new CookieContainer();
        var cookie = new Cookie()
        {
            Name = ".AspNetCore.Identity.Application",
            Domain = "localhost",
            Value = Cookie1
        };

        container.Add(cookie);


        hubConnection = new HubConnectionBuilder()
       .WithUrl(NavigationManager.ToAbsoluteUri("/taskhub"), options =>
       {
           options.Cookies = container;
       }).Build();



        await hubConnection.StartAsync();





        hubConnection.On<int>("UpdateTask", (TaskId) =>
        {
            Action = true;
            Message = "Dodano nowe zadanie";
            //// call  refresh tasks and view messages

            InvokeAsync(StateHasChanged);
        });



        //hubConnection.On<int>("UpdateTask2", (TaskId) =>
        //{
        //    Action = true;
        //    //// call  refresh tasks and view messages

        //    InvokeAsync(StateHasChanged);
        //});





    }




}
