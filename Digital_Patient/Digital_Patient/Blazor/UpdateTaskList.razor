@page "/taskhub"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;


@using Microsoft.AspNetCore.Components.Forms
@using Digital_Patient.Models
@using Digital_Patient.Data
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore.Design
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore




@inject IDbContextFactory<ApplicationDbContext>  factory


<h3 @onchange="UpdateTask">@Message   @UserIdTaskChange </h3>



@code {

    [Parameter]
    public string UserIdTaskChange { get; set; } = "";

    public string Message { get; set; } = "";

    public int TaskId { get; set; } = 0;

    private Repository repository;

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/taskhub"))
            .Build();



        await hubConnection.StartAsync();
    }


    protected override void OnParametersSet()
    {

        UpdateTask();


    }



    public async Task UpdateTask()
    {


        if (UserIdTaskChange != null && UserIdTaskChange != "")
        {
            try
            {



                ApplicationDbContext context = factory.CreateDbContext();
                repository = new Repository(context);

                string UserId = repository.GetUserByEmail(UserIdTaskChange);

                Message = "Zmiana u użytkownika";

                TaskId = 0;
                await hubConnection.SendAsync("Update", UserId, TaskId);

                UserIdTaskChange = "";
                Message = "";
            }
            catch (Exception e)
            {

            }
        }



    }


}
