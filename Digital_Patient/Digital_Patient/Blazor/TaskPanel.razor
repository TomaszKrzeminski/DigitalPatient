@using Microsoft.AspNetCore.Components.Forms
@using Digital_Patient.Models
@using Digital_Patient.Data
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore.Design
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<ApplicationDbContext>  factory




<h1>@Action</h1>


<div class="container">
    <div class="row">
        <div class="col col-lg-3">
            Pacjenci
            @foreach (var u in allpatients.OrderBy(x=>x))
            {
                <div @onclick="@(()=>AddToMyPatients(u))">
                    @u
                </div>
            }
        </div>
        <div class="col col-lg-3">
            Moi Pacjenci
            @foreach (var u in patients.OrderBy(x=>x.Email))
            {
                <div  @onclick="@(()=>ShowPatientTasks(u.Email))">
                    @u.Email
                </div>
            }
        </div>
        <div class="col col-lg-3">
            Zadania
            @foreach (var tasktoDo in PatientTaskList)
            {
                <div>
                    @tasktoDo.TaskToDoCategory.CategoryName
                    @tasktoDo.Description
                </div>
            }
        </div>
        <div class="col col-lg-3">
            Dodaj Nowe



        </div>
    </div>
</div>










@code {

    public string Action { get; set; }

    [Parameter]
    public string UserId { get; set; }

    public string PatientEmail { get; set; }

    public string SelectedPatientEmail { get; set; }

    private Repository repository;

    List<ApplicationUser> patients = new List<ApplicationUser>();

    List<string> allpatients = new List<string>();

    List<TaskToDo> PatientTaskList = new List<TaskToDo>();

    protected async override Task OnParametersSetAsync()
    {


        ApplicationDbContext context = factory.CreateDbContext();
        repository = new Repository(context);

        patients = repository.GetDoctorPatients(UserId );

        List<string> listExcept = new List<string>();

        if(patients!=null&&patients.Count>0)
        {
            listExcept = patients.Select(x => x.Email).ToList();
        }

        allpatients = repository.GetAllPatients(listExcept);


    }

    public void AddToMyPatients(string Email)
    {
        bool check= repository.AddUserToDoctorPatients(Email, UserId);

        if(check)
        {
            Action = "Dodano" + " " + Email + " do twoich Pacjentów";
            ShowPatientTasks(Email);
            OnParametersSetAsync();
        }


    }

    public void ShowPatientTasks(string PatientId)
    {
        ApplicationDbContext context = factory.CreateDbContext();
        repository = new Repository(context);

        PatientTaskList = repository.GetUserTasksToDo2(PatientId);




    }




}
