@using Microsoft.AspNetCore.Components.Forms
@using Digital_Patient.Blazor
@using Digital_Patient.Models
@using Digital_Patient.Data
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore.Design
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<ApplicationDbContext>  factory

@page "/MainPage"

<style>
    .selectTask:hover {
        background-color: darkgoldenrod;
    }
</style>


<div class="container-fluid ">       
    
    
    <div class="row">
        <div class="col-lg-6">
            <div class="row">
                <h1 class="badge badge-dark text-left"> @AllTasks </h1>
            </div>


            @foreach (var hour in Hours)
            {

                <div class="row">
                    <div class="col-lg-12 text-left">
                        <h2>@hour.HourTime : 00   </h2><p class="badge badge-warning"> @hour.HourTasks </p>
                    </div>
                </div>

                @if (hour.HourTime == Now.Hour)
                {
                    <div class="row">

                        @{

                            int i = 0;
                            foreach (var min in hour.minutes)
                            {

                                if (min.Tasks != null && min.Tasks.Count > 0)
                                {


                                    <div class="col-lg-12 col-md-12 col-sm-12  text-left">
                                        <div class="row">
                                            <div class="col col-lg-4"><p class="badge badge-light"> @hour.HourTime : @i </p></div>
                                            <div class="col col-lg-4"></div>
                                            <div class="col col-lg-4"></div>
                                        </div>

                                    </div>






                                    @foreach (var task in min.Tasks)
                                    {
                                        string clock = hour.HourTime + ":" + min.MinuteTime;
                                        @*<div class="col-lg-12 col-md-12 col-sm-12 alert-dark text-left"  @onclick="@(()=>SetTaskId(@task.TaskToDoId,clock))"  >
                                        @task.TaskToDoId @task.Description @task.TaskToDoCategory.CategoryName @task.Measurements.FirstOrDefault().MeasurementCategory.CategoryName
                                    </div>*@


                                        <div class="col-lg-12 col-md-12 col-sm-12  text-left" @onclick="@(()=>SetTaskId(@task.TaskToDoId,clock))">

                                            <div class="row">

                                                <div class="col col-lg-4 alert-dark selectTask"> @task.TaskToDoId @task.Description @task.TaskToDoCategory.CategoryName @task.Measurements.FirstOrDefault().MeasurementCategory.CategoryName</div>
                                                <div class="col col-lg-4"></div>
                                                <div class="col col-lg-4"></div>

                                            </div>


                                        </div>

                                    }

                                }


                                i++;

                            }

                        }


                    </div>
                }
                else
                {
        <div class="row">

            @{

                int i = 0;
                foreach (var min in hour.minutes)
                {

                    if (min.Tasks != null && min.Tasks.Count > 0)
                    {


                        if (i < 10)
                        {
                        <div class="col-lg-12 col-md-12 col-sm-12  text-left">
                            <div class="row">
                                <div class="col col-lg-4"><p class="badge badge-light selectTask "> @hour.HourTime : 0 @i </p></div>
                                <div class="col col-lg-4"></div>
                                <div class="col col-lg-4"></div>
                            </div>

                        </div>
                        }
                        else
                        {
                            <div class="col-lg-12 col-md-12 col-sm-12  text-left">
                                <div class="row">
                                    <div class="col col-lg-4"><p class="badge badge-light "> @hour.HourTime : @i </p></div>
                                    <div class="col col-lg-4"></div>
                                    <div class="col col-lg-4"></div>
                                </div>

                            </div>
                        }

                        






                        @foreach (var task in min.Tasks)
                        {
                            string clock = hour.HourTime + ":" + min.MinuteTime;
                            @*<div class="col-lg-12 col-md-12 col-sm-12 alert-dark text-left"  @onclick="@(()=>SetTaskId(@task.TaskToDoId,clock))"  >
                            @task.TaskToDoId @task.Description @task.TaskToDoCategory.CategoryName @task.Measurements.FirstOrDefault().MeasurementCategory.CategoryName
                        </div>*@


                            <div class="col-lg-12 col-md-12 col-sm-12  text-left" @onclick="@(()=>SetTaskId(@task.TaskToDoId,clock))">

                                <div class="row">

                                    <div class="col col-lg-4 selectTask"> @task.TaskToDoId @task.Description @task.TaskToDoCategory.CategoryName @task.Measurements.FirstOrDefault().MeasurementCategory.CategoryName</div>
                                    <div class="col col-lg-4"></div>
                                    <div class="col col-lg-4"></div>

                                </div>


                            </div>

                        }

                    }


                    i++;

                }

            }


        </div>
                }






            }


        </div>
        <div class="col-lg-6 col-md-12 col-sm-12 alert-light" style="min-height:200px;">
           
            <TaskAction TaskId="@SelectedTaskId"   CustomEvent="@HandleTask" TaskTime="@FullTime"   />

        </div>
    </div>

</div>


@code {


    [Parameter]
    public string UserRole { get; set; }
    int SelectedTaskId { get; set; } = 0;
    string FullTime { get; set; }

    bool CompleteTask { get; set; }

    private Repository repository;

    int AllTasks { get; set; }

    [Parameter]
    public   string Check { get; set; }

    [Parameter]
    public  string ApplicationUserId { get; set; }

    public List<Hour> Hours { get; set; } = new List<Hour>();

    public DateTime Now { get; set; }

    public void SetTaskId(int TaskId,string fullTime)
    {
        SelectedTaskId = TaskId;
        FullTime = fullTime;
    }


    public void HandleTask(bool Done)
    {
        CompleteTask = Done;
    }


    async Task  GetHoursView(string Id)
    {
        ApplicationDbContext context = factory.CreateDbContext();
        repository = new Repository(context);

        //Hours = await repository.GetHoursData(ApplicationUserId);

        FullHours hours = await repository.GetHoursData2(ApplicationUserId);
        Hours = hours.Hours;
        AllTasks = hours.HourTasks;
    }




    //protected override async Task OnInitializedAsync()
    //{
    //    string Id = ApplicationUserId;
    //    await   GetHoursView(Id);

    //}





    protected async  override Task  OnParametersSetAsync()
    {
        string x = Check;
        string Id = ApplicationUserId;
        await  GetHoursView(Id);
        Now = DateTime.Now;

    }









}
